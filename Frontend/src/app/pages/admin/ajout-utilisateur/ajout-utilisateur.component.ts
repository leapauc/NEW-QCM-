import { CommonModule } from '@angular/common';
import { Component } from '@angular/core';
import {
  AbstractControl,
  FormBuilder,
  FormGroup,
  ReactiveFormsModule,
  Validators,
} from '@angular/forms';
import { UserService } from '../../../services/user.service';
import * as bootstrap from 'bootstrap'; // importer Bootstrap JS
import { ModalComponent } from '../../../components/modal_success_failure/modal.component';

/**
 * @component
 * @name AjoutUtilisateurComponent
 * @description
 * Composant permettant de cr√©er un nouvel utilisateur via un formulaire r√©actif.
 *
 * Fonctionnalit√©s principales :
 * - Formulaire avec validation pour :
 *    - Nom (obligatoire)
 *    - Pr√©nom (obligatoire)
 *    - Email (obligatoire et format email valide)
 *    - Soci√©t√© (facultatif)
 *    - Mot de passe (obligatoire, minimum 8 caract√®res)
 *    - Confirmation du mot de passe (doit correspondre au mot de passe)
 *    - Champ admin (bool√©en)
 * - Validation personnalis√©e pour v√©rifier que le mot de passe et sa confirmation correspondent.
 * - Appel au service `UserService` pour cr√©er l‚Äôutilisateur.
 * - Affichage de modals Bootstrap en cas de succ√®s ou d‚Äô√©chec.
 * - R√©initialisation du formulaire apr√®s cr√©ation r√©ussie.
 *
 * @example
 * <app-ajout-utilisateur></app-ajout-utilisateur>
 */
@Component({
  selector: 'app-ajout-utilisateur',
  imports: [ReactiveFormsModule, CommonModule, ModalComponent],
  templateUrl: './ajout-utilisateur.component.html',
})
export class AjoutUtilisateurComponent {
  /**
   * Formulaire r√©actif pour la cr√©ation d‚Äôun utilisateur.
   */
  form: FormGroup;

  /**
   * Constructeur du composant.
   * @param fb FormBuilder pour cr√©er le formulaire r√©actif.
   * @param userService Service pour g√©rer les utilisateurs via l‚ÄôAPI.
   */
  constructor(private fb: FormBuilder, private userService: UserService) {
    this.form = this.fb.group(
      {
        name: ['', Validators.required],
        firstname: ['', Validators.required],
        email: ['', [Validators.required, Validators.email]],
        society: [''],
        password: ['', [Validators.required, Validators.minLength(8)]],
        confirmPassword: ['', Validators.required],
        admin: [false],
      },
      { validator: this.passwordMatchValidator }
    );
  }

  /**
   * Validator personnalis√© pour v√©rifier que le mot de passe et la confirmation correspondent.
   * @param group AbstractControl repr√©sentant le formulaire.
   * @returns null si les mots de passe correspondent, sinon { notMatching: true }.
   */
  passwordMatchValidator(group: AbstractControl) {
    const password = group.get('password')?.value;
    const confirm = group.get('confirmPassword')?.value;
    return password === confirm ? null : { notMatching: true };
  }

  /**
   * M√©thode appel√©e lors de la soumission du formulaire.
   * - V√©rifie la validit√© du formulaire.
   * - Supprime le champ confirmPassword des donn√©es envoy√©es.
   * - D√©finit admin √† false si non renseign√©.
   * - Appelle `userService.createUser` pour cr√©er l‚Äôutilisateur.
   * - Affiche un modal Bootstrap en cas de succ√®s ou d‚Äô√©chec.
   * - R√©initialise le formulaire apr√®s cr√©ation r√©ussie.
   */
  onSubmit() {
    if (this.form.valid) {
      const { confirmPassword, ...userData } = this.form.value;

      // Forcer admin √† false si non coch√©
      if (!userData.admin) {
        userData.admin = false;
      }

      this.userService.createUser(userData).subscribe({
        next: (user) => {
          console.log('Utilisateur cr√©√©', user);
          this.form.reset();

          // ‚úÖ Modal de succ√®s
          const modalEl = document.getElementById('successModal');
          if (modalEl) new bootstrap.Modal(modalEl).show();
        },
        error: (err) => {
          console.error('Erreur cr√©ation utilisateur :', err);

          // üü° V√©rifie le code d‚Äôerreur HTTP
          if (err.status === 409) {
            // ‚ö†Ô∏è Conflit : nom/mot de passe d√©j√† existants
            const modalEl = document.getElementById('conflictModal');
            if (modalEl) new bootstrap.Modal(modalEl).show();
          } else {
            // ‚ùå Erreur g√©n√©rique
            const modalEl = document.getElementById('failedModal');
            if (modalEl) new bootstrap.Modal(modalEl).show();
          }
        },
      });
    } else {
      console.log('Form invalid');
    }
  }
}
